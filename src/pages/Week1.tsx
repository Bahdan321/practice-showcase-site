
import { TaskCardWithCode } from "@/components/TaskCardWithCode";

const Week1 = () => {
  const tasks = [
    {
      title: "1.1 Задача линейного алгоритма",
      description: "120 рублей разделили между тремя людьми так, что второй получил в 2 раза больше первого, а третий — на 10 рублей меньше второго. Сколько получил каждый?",
      screenshot: "/public/firstWeek/firstTask.png",
      code: "x = 26\nfirst = x\nsecond = 2 * x\nthird = 2 * x - 10\nprint(f'Первый получил: {first} рублей')\nprint(f'Второй получил: {second} рублей')\nprint(f'Третий получил: {third} рублей')\ntotal = first + second + third\nprint(f'Проверка: {first} + {second} + {third} = {total} рублей')",
    },
    {
      title: "1.2 Задача разветвляющегося алгоритма",
      description: "Проверка числа на простоту. Определите, является ли число простым.",
      screenshot: "/public/firstWeek/secondTask.png",
      code: "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nnumber = int(input('Введите число для проверки: '))\nif is_prime(number):\n    print(f'Число {number} является простым')\nelse:\nprint(f'Число {number} не является простым')",
    },
    {
      title: "1.3 Задача циклического алгоритма",
      description: "Переверните строку задом наперёд (например, 'hello' → 'olleh').",
      screenshot: "/public/firstWeek/thirdTask.png",
      code: "nuser_string = input('Введите строку: ')\nif not user_string:\n    raise ValueError('Строка не должна быть пустой!')\nprint(f'Ваша реверсированная строка: {user_string[::-1]}'",
    },
    {
      title: "1.4 Задача на проектирование классов",
      description: "Разработайте классы для управления пользователями, постами и комментариями. Реализуйте методы для добавления и удаления контента.",
      screenshot: "/public/firstWeek/fourthTask.png",
      code: "class Comment:\n    def init(self, comment_id, author, post, content):\n        self.comment_id = comment_id\n        self.author = author\n        self.post = post\n        self.content = content\nclass Post:\n    def init(self, post_id, author, content):\n        self.post_id = post_id\n        self.author = author\n        self.content = content\n        self.comments = []\n    def add_comment(self, comment: Comment):\n        self.comments.append(comment)\n    def remove_comment(self, comment: Comment):\n        if comment in self.comments:\n            self.comments.remove(comment)\nclass User:\n    def init(self, user_id, username):\n        self.user_id = user_id\n        self.username = username\n        self.posts = []\n        self.comments = []\n    def add_post(self, post: Post):\n        self.posts.append(post)\n    def remove_post(self, post: Post):\n        if post in self.posts:\n            self.posts.remove(post)\n    def add_comment(self, comment: Comment):\n        self.comments.append(comment)\n    def remove_comment(self, comment: Comment):\n        if comment in self.comments:\n            self.comments.remove(comment)",
    },
    {
      title: "1.5 Задача с графическим интерфейсом",
      description: "Виртуальный музей. Разработайте приложение для виртуального музея с графическим интерфейсом.",
      screenshot: "/public/firstWeek/fiveTask.png",
      code: 'import flet as ft\nanime_list = [{"title": "Киберпанк: Бегущие по краю", "poster": "https://kinopoisk-ru.clstorage.net/", "release_date": "13 сентября 2022 года", "description": "Действия аниме-сериала происходят в будущем, в вольном мегаполисе Найт-Сити, расположенном на западе Северной Америки. Город страдает от повсеместной коррупции, многие люди одержимы высокими технологиями и разного рода кибернетическими имплантатами. Помимо этого, в нём также большие проблемы с преступностью, дискриминацией по разным признакам и безопасностью населения.", "opinion": "ABSOLUTE CINEMA"}, {"title": "Как и ожидалось, моя школьная романтическая жизнь не удалась", "poster": "https://kinopoisk-ru.clstorage.net/", "release_date": "5 апреля 2013", "description": "Старшеклассник Хатиман Хикигая — интроверт, циник и пессимист. Он уверен, что дружба, любовь и прочие социальные отношения — полная чушь. После написанного Хатиманом уничижительного эссе, его в качестве наказания отправляют прямиком в клуб волонтёров, где ему придётся вместе с красавицей школы Юкино Юкиноситой решать проблемы других людей.", "opinion": "ABSOLUTE CINEMA"}, {"title": "Моб Психо 100", "poster": "https://kinopoisk-ru.clstorage.net/", "release_date": "11 июля 2016", "description": "Шигэо Кагэяма вроде бы обычный японский школьник — стеснительный, старающийся не привлекать внимания, не блещущий умом, красотой или чувством юмора. И самое большое его желание — привлечь внимание любимой девушки. Но! У этого восьмиклассника есть экстрасенсорные способности. С детства он взглядом гнет ложки и передвигает предметы. И пусть общественность пока этого не оценила, зато выгоду в этом очень скоро нашел его «ментальный наставник», эксплуатирующий способности Кагэямы себе на поживу.Как будет искать свой путь в этом привычно жестоком мире юный экстрасенс — нам и предстоит увидеть.", "opinion": "ABSOLUTE CINEMA"}, {"title": "Невероятные приключения ДжоДжо", "poster": "https://kinopoisk-ru.clstorage.net/", "release_date": "4 октября 2012", "description": "История девяти частей манги разворачивается вокруг приключений Джонатана Джостара и его потомков: каждая часть представляет читателю отдельную историю и нового героя, способного применять в бою сверхъестественные способности.", "opinion": "ABSOLUTE CINEMA"}, {"title": "Опасность в моём сердце", "poster": "https://kinopoisk-ru.clstorage.net/", "release_date": "9 ноября 2022", "description": "У тихого и замкнутого школьника Кётаро Итикавы весьма богатое воображение, ведь он постоянно представляет, как убивает одноклассников различными способами,  и особенно часто — самую красивую девочку класса Анну Ямаду. Однажды он случайно сталкивается с Анной в библиотеке, и с удивлением отмечает, что она очень милая и забавная. Постепенно Кётаро начинает испытывать к девушке новые для себя чувства.", "opinion": "ABSOLUTE CINEMA"}]\ndef main(page: ft.Page):\n    page.bgcolor = ft.colors.TRANSPARENT\n    page.bg_gradient = ft.LinearGradient(begin=ft.alignment.top_left, end=ft.alignment.bottom_right, colors=[ft.Colors.BLUE_GREY_900, ft.Colors.WHITE, ft.Colors.BLUE_400])\n    def create_anime_card(anime):\n        print(f"Попытка загрузить изображение: {anime["poster"]}")\n        poster = ft.Image(src=anime["poster"], width=200, height=300, fit=ft.ImageFit.CONTAIN, error_content=ft.Text("Изображение не загрузилось", color=ft.colors.RED))\n        title = ft.Text(anime["title"], size=18, text_align=ft.TextAlign.CENTER, color=ft.colors.WHITE)\n        button = ft.ElevatedButton("Подробнее", on_click=lambda _: page.go(f"/details/{anime_list.index(anime)}"), style=ft.ButtonStyle(bgcolor=ft.colors.BLUE_700, color=ft.colors.WHITE, shape=ft.RoundedRectangleBorder(radius=8)))\n        return ft.Container(content=ft.Column([poster, title, button], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER), width=250, height=500, gradient=ft.LinearGradient(begin=ft.alignment.top_left, end=ft.alignment.bottom_right, colors=[ft.colors.GREY_700, ft.colors.GREY_800]), border_radius=10, padding=10, shadow=ft.BoxShadow(spread_radius=2, blur_radius=10, color=ft.colors.BLACK54, offset=ft.Offset(0, 4)))\n    cards = [create_anime_card(anime) for anime in anime_list]\n    top_row = ft.Row(cards[:3], alignment=ft.MainAxisAlignment.CENTER, spacing=20)\n    bottom_row = ft.Row(cards[3:], alignment=ft.MainAxisAlignment.CENTER, spacing=20)\n    gallery_title = ft.Text("Галерея аниме", size=24, text_align=ft.TextAlign.CENTER, color=ft.Colors.WHITE)\n    back_button = ft.ElevatedButton("Назад", on_click=lambda _: page.go("/"), style=ft.ButtonStyle(bgcolor=ft.colors.BLUE_700, color=ft.colors.WHITE, shape=ft.RoundedRectangleBorder(radius=8)))\n    gallery_content = ft.Column([gallery_title, back_button, top_row, bottom_row], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=20, scroll=ft.ScrollMode.AUTO)\n    gallery_container = ft.Container(content=gallery_content, alignment=ft.alignment.center, expand=True)\n    welcome_text = ft.Text("Добро пожаловать в виртуальный музей моих любимых аниме!", size=24, text_align=ft.TextAlign.CENTER, color=ft.colors.WHITE)\n    welcome_button = ft.ElevatedButton("Перейти в галерею", on_click=lambda _: page.go("/gallery"), style=ft.ButtonStyle(bgcolor=ft.colors.BLUE_700, color=ft.colors.WHITE, shape=ft.RoundedRectangleBorder(radius=8)))\n    welcome_container = ft.Container(content=ft.Column([welcome_text, welcome_button], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER), alignment=ft.alignment.center, expand=True)\n    def create_details_page(anime):\n        poster = ft.Image(src=anime["poster"], width=400, height=400, fit=ft.ImageFit.CONTAIN)\n        title = ft.Text(anime["title"], size=28, text_align=ft.TextAlign.CENTER, color=ft.colors.WHITE)\n        release_date = ft.Text(f"Дата выхода: {anime["release_date"]}", size=18, text_align=ft.TextAlign.CENTER, color=ft.colors.WHITE)\n        description_block = ft.Container(content=ft.Text(anime["description"], size=16, text_align=ft.TextAlign.JUSTIFY, color=ft.colors.WHITE), gradient=ft.LinearGradient(begin=ft.alignment.top_left, end=ft.alignment.bottom_right, colors=[ft.colors.GREY_700, ft.colors.GREY_800]), padding=20, border_radius=10, width=600, shadow=ft.BoxShadow(spread_radius=2, blur_radius=10, color=ft.colors.BLACK54, offset=ft.Offset(0, 4)))\n        opinion_block = ft.Container(content=ft.Text(anime["opinion"], size=16, text_align=ft.TextAlign.JUSTIFY, color=ft.colors.WHITE), gradient=ft.LinearGradient(begin=ft.alignment.top_left, end=ft.alignment.bottom_right, colors=[ft.colors.GREY_700, ft.colors.GREY_800]), padding=20, border_radius=10, width=600, shadow=ft.BoxShadow(spread_radius=2, blur_radius=10, color=ft.colors.BLACK54, offset=ft.Offset(0, 4)))\n        back_button = ft.ElevatedButton("Назад", on_click=lambda _: page.go("/gallery"), style=ft.ButtonStyle(bgcolor=ft.colors.BLUE_700, color=ft.colors.WHITE, shape=ft.RoundedRectangleBorder(radius=8)))\n        return ft.Container(content=ft.Column([poster, title, release_date, description_block, opinion_block, back_button], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=20, scroll=ft.ScrollMode.AUTO), alignment=ft.alignment.center, expand=True)\n    def route_change(route):\n        page.views.clear()\n        if page.route == "/":\n            page.views.append(ft.View("/", [welcome_container], horizontal_alignment=ft.CrossAxisAlignment.CENTER, vertical_alignment=ft.MainAxisAlignment.CENTER, bgcolor=ft.colors.TRANSPARENT))\n        elif page.route == "/gallery":\n            page.views.append(ft.View("/gallery", [gallery_container], horizontal_alignment=ft.CrossAxisAlignment.CENTER, vertical_alignment=ft.MainAxisAlignment.CENTER, bgcolor=ft.colors.TRANSPARENT))\n        elif page.route.startswith("/details/"):\n            try:\n                index = int(page.route.split("/")[-1])\n                if 0 <= index < len(anime_list):\n                    details_container = create_details_page(anime_list[index])\n                    page.views.append(ft.View(f"/details/{index}", [details_container], horizontal_alignment=ft.CrossAxisAlignment.CENTER, vertical_alignment=ft.MainAxisAlignment.CENTER, bgcolor=ft.colors.TRANSPARENT))\n                else:\n                    page.go("/gallery")\n            except ValueError:\n                page.go("/gallery")\n        page.update()\n    page.on_route_change = route_change\n    page.go("/")\nft.app(target=main)',
    },
  ];

  return (
    <div className="container mx-auto py-8 px-4">
      <h1 className="text-3xl font-bold mb-8">Первая неделя практики</h1>
      <div className="grid gap-8 md:grid-cols-2">
        {tasks.map((task, index) => (
          <TaskCardWithCode key={index} {...task} />
        ))}
      </div>
    </div>
  );
};

export default Week1;
